<ccl:CustomChromeWindow 
    x:Class="UrbanRivalsManager.View.CombatCalculatorCreationModeView"
    x:Name="Window"
    
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:shell="http://schemas.microsoft.com/winfx/2006/xaml/presentation/shell"
    
    xmlns:ccl="clr-namespace:CustomChromeLibrary;assembly=CustomChromeLibrary"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    
    xmlns:resx="clr-namespace:UrbanRivalsManager.Properties"
    xmlns:usercontrol="clr-namespace:UrbanRivalsManager.UserControls"
    xmlns:model="clr-namespace:UrbanRivalsManager.Model"
    xmlns:utils="clr-namespace:UrbanRivalsManager.Utils"
    
    Title="UR Calculator" 
    ResizeMode="CanResize" 
    AllowsTransparency="True"
    Background="Transparent"
    WindowStyle="None"
    Icon="/Resources/Misc/pillz_vertical.png"
    Topmost="{Binding StayOnTop, ElementName=Window}"
    
    MouseLeftButtonDown="Window_MouseLeftButtonDown"
    Closing="Window_Closing"
    >
    <shell:WindowChrome.WindowChrome>
        <shell:WindowChrome
            ResizeBorderThickness="6"
            CaptionHeight="0"
            GlassFrameThickness="0"
            CornerRadius="0">
        </shell:WindowChrome>
    </shell:WindowChrome.WindowChrome>

    <Window.Resources>
        <Style TargetType="FrameworkElement">
            <Setter Property="Margin" Value="2"/>
        </Style>
        <Style TargetType="Label" BasedOn="{StaticResource {x:Type FrameworkElement}}"/>
        <Style TargetType="CheckBox" BasedOn="{StaticResource {x:Type FrameworkElement}}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <Style TargetType="ccl:CaptionButtons">
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="VerticalAlignment" Value="Top" />
        </Style>
        <Style TargetType="TextBlock">
            <Setter Property="TextWrapping" Value="Wrap" />
        </Style>
        <Style x:Key="GlobalBackground" TargetType="Rectangle">
            <Setter Property="Fill" Value="#af550055" />
        </Style>
        <Style x:Key="GridSplitter" TargetType="GridSplitter">
            <Setter Property="Height" Value="Auto" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="Background" Value="#01000000" />
        </Style>
        <Style x:Key="WindowBorder" TargetType="Border">
            <Setter Property="BorderBrush" Value="Silver" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>
        <Style x:Key="HoleBorder" TargetType="Border" BasedOn="{StaticResource WindowBorder}">
            <Setter Property="BorderThickness" Value="8" />
        </Style>
        <GridLength x:Key="GridSplitterSize">8</GridLength>
    </Window.Resources>

    <Grid>
        <!-- External Border -->
        <Border Style="{StaticResource WindowBorder}" />       
        
        <!-- Content -->
        <Grid Name="GlobalGrid">
                
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Column1Width, ElementName=Window, Mode=TwoWay}" />
                <ColumnDefinition Width="{StaticResource GridSplitterSize}" />
                <ColumnDefinition Width="{Binding Column2Width, ElementName=Window, Mode=TwoWay}" />
                <ColumnDefinition Width="{StaticResource GridSplitterSize}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="{Binding Row1Height, ElementName=Window, Mode=TwoWay}" />
                <RowDefinition Height="{StaticResource GridSplitterSize}" />
                <RowDefinition Height="{Binding Row2Height, ElementName=Window, Mode=TwoWay}" />
                <RowDefinition Height="{StaticResource GridSplitterSize}" />
                <RowDefinition />
            </Grid.RowDefinitions>
                
            <!--Left Column-->
            <Rectangle Style="{StaticResource GlobalBackground}" Grid.Column="0" Grid.RowSpan="5" />
            <!--Right Column-->
            <Rectangle Style="{StaticResource GlobalBackground}" Grid.Column="4" Grid.RowSpan="5" />
            <!--Top Row-->
            <Rectangle Style="{StaticResource GlobalBackground}" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="5" />
            <!--Bottom Row-->
            <Rectangle Style="{StaticResource GlobalBackground}" Grid.Column="0" Grid.Row="4" Grid.ColumnSpan="5" />
            <!--Left Center-->
            <Rectangle Style="{StaticResource GlobalBackground}" Grid.Column="0" Grid.Row="1" Grid.RowSpan="3" />
            <!--Right Center-->
            <Rectangle Style="{StaticResource GlobalBackground}" Grid.Column="4" Grid.Row="1" Grid.RowSpan="3" />
            <!--Top Center-->
            <Rectangle Style="{StaticResource GlobalBackground}" Grid.Column="1" Grid.Row="0" Grid.ColumnSpan="3" />
            <!--Bottom Center-->
            <Rectangle Style="{StaticResource GlobalBackground}" Grid.Column="1" Grid.Row="4" Grid.ColumnSpan="3" />

            <Border Style="{StaticResource HoleBorder}" Grid.Column="1" Grid.ColumnSpan="3" Grid.Row="1" Grid.RowSpan="3" />
            <!--Left-->
            <GridSplitter Style="{StaticResource GridSplitter}" Grid.Column="1" Grid.Row="2" />
            <!--Top-->
            <GridSplitter Style="{StaticResource GridSplitter}" Grid.Column="2" Grid.Row="1" />
            <!--Right-->
            <GridSplitter Style="{StaticResource GridSplitter}" Grid.Column="3" Grid.Row="2" />
            <!--Bottom-->
            <GridSplitter Style="{StaticResource GridSplitter}" Grid.Column="2" Grid.Row="3" />

            <!-- Preparation State -->
            
            <!-- Combat Parameters -->
            <Grid Grid.RowSpan="5" Margin="50" Background="Gray" Height="Auto">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                    
                <TextBlock Text="{x:Static resx:UIStrings.ui_calculator_gamemode}" />
                <ComboBox Grid.Column="1" SelectedIndex="0" 
                          DisplayMemberPath="DisplayName" 
                          ItemsSource="{utils:EnumToItemsSource {x:Type model:GameMode}}" 
                          SelectedValue="{Binding GameMode}" 
                          SelectedValuePath="Value" />

                <CheckBox Grid.Row="1" Grid.ColumnSpan="2" IsChecked="{Binding HasInitiative}">
                    <TextBlock Text="{x:Static resx:UIStrings.ui_calculator_firstplayer}" />
                </CheckBox>

                <!--<TextBlock Margin="20" Text="{Binding GameMode}" />-->
                    
                <!-- Tourney, Classic, Solo, Duel -->
                <Grid Grid.Row="2" Grid.ColumnSpan="2">
                    <StackPanel x:Name="RandomType">
                        <CheckBox IsChecked="{Binding IsRandom}">
                            <TextBlock Text="{x:Static resx:UIStrings.ui_calculator_random}"/>
                        </CheckBox>
                    </StackPanel>
                </Grid>
                
                <!-- Elo doesn't need an extra pannel-->

                <!-- LeaderWars -->

                <!-- Survivor -->
                    
                <!-- Custom -->

                <!-- Start combat -->
                <Button Grid.Row="3" Grid.ColumnSpan="2" Content="{x:Static resx:UIStrings.ui_calculator_start_combat}" Command="{Binding CreateCombat}" Click="CreateCombat_Click"/>
            </Grid>
                
            <!-- Enemy Cards (Right/Top) -->
            <Grid Grid.Column="2" VerticalAlignment="Bottom" Margin="0,20">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="5*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="5*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="5*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="5*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <usercontrol:CardDefinitionSelector Grid.Column="1" InMemoryManager="{Binding InMemoryManager}" SelectedCardDefinition="{Binding CreationRightCards[0]}" Level="{Binding CreationRightLevels[0]}" />
                <usercontrol:CardDefinitionSelector Grid.Column="3" InMemoryManager="{Binding InMemoryManager}" SelectedCardDefinition="{Binding CreationRightCards[1]}" Level="{Binding CreationRightLevels[1]}" />
                <usercontrol:CardDefinitionSelector Grid.Column="5" InMemoryManager="{Binding InMemoryManager}" SelectedCardDefinition="{Binding CreationRightCards[2]}" Level="{Binding CreationRightLevels[2]}" />
                <usercontrol:CardDefinitionSelector Grid.Column="7" InMemoryManager="{Binding InMemoryManager}" SelectedCardDefinition="{Binding CreationRightCards[3]}" Level="{Binding CreationRightLevels[3]}" />
            </Grid>
                
            <!-- Your Cards (Left/Bottom) -->
            <Grid Grid.Column="2" Grid.Row="5" VerticalAlignment="Top" Margin="0,20">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="5*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="5*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="5*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="5*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <usercontrol:CardDefinitionSelector Grid.Column="1" InMemoryManager="{Binding InMemoryManager}" SelectedCardDefinition="{Binding CreationLeftCards[0]}" Level="{Binding CreationLeftLevels[0]}" />
                <usercontrol:CardDefinitionSelector Grid.Column="3" InMemoryManager="{Binding InMemoryManager}" SelectedCardDefinition="{Binding CreationLeftCards[1]}" Level="{Binding CreationLeftLevels[1]}" />
                <usercontrol:CardDefinitionSelector Grid.Column="5" InMemoryManager="{Binding InMemoryManager}" SelectedCardDefinition="{Binding CreationLeftCards[2]}" Level="{Binding CreationLeftLevels[2]}" />
                <usercontrol:CardDefinitionSelector Grid.Column="7" InMemoryManager="{Binding InMemoryManager}" SelectedCardDefinition="{Binding CreationLeftCards[3]}" Level="{Binding CreationLeftLevels[3]}" />
            </Grid>

        <!-- End Preparation State -->

            <!-- TODO: testing zone DELETE -->
            <StackPanel Grid.Column="4" Grid.Row="2" Margin="20">
                <Button VerticalAlignment="Center" HorizontalAlignment="Center" Click="StayOnTop_Click">
                    <StackPanel Orientation="Horizontal">
                        <CheckBox VerticalAlignment="Center" IsHitTestVisible="False" IsChecked="{Binding StayOnTop, ElementName=Window}"/>
                        <Label>Top</Label>
                    </StackPanel>
                </Button>

                <Button Click="FillValues">Fill values</Button>
            </StackPanel>
            <!-- END testing zone DELETE  -->

        </Grid>
        <!-- End Content -->

        <ccl:CaptionButtons DataContext="{Binding ElementName=Window}"/>
    </Grid>
</ccl:CustomChromeWindow>